_______________________________________________________________________________
Комплекс Мониторинга Качества Углей
О продукте:      http://www.kometalab.com.ua/products/mku/

_______________________________________________________________________________
Описание файла points.cqm.
Автор: Руслан Кеба.
______________________________________________________________________________
1. ОБЩИЕ ПОЛОЖЕНИЯ.

Файл points.cqm описывает используемые точки контроля системы и охватываемую
технологическую схему предприятия. Ссылка на него находится в ини для Сервера:

  [core]
  ;конфигурация точек контроля
  pointsconffile=points.cqm

Этот файл читает ядро (core) как входной поток.
Информативная часть файла начинается после слова start
и заканчивается словом end.
Допустимы комментарии; это строка начинающаяся с символа '#'.
Структура файла:

  start
    [секция 1]
      item ...
      item ...
      ...
    end
    [секция 2]
      item ...
      item ...
      ...
    end
    ...
  end

Файл разбит на секции, каждая из которых описывает одинаковые сущности
или процессы:
  points            - точки контроля;
  vagons            - системы повагонного контроля;
  functions         - функции (huru-скрипты);
  traffics          - траффики;
  routes            - маршруты;
  accumulators      - аккумуляторы;
  makecoaltypeorder - последовательность решения типа угля (coaltype) для сущностей.
  autoexecs         - команды перед стартом ядра на CQML.

Каждая секция после описания сущностей заканчивается словом end.
Описание каждой сущности начинается словом item. Например:

  points
    item ...
    item ...
  end

При размещении секций должны соблюдаться следующие правила:
1) Секция functions располагается ПЕРВАЯ.
2) Секция traffics  располагается ВТОРАЯ.
3) Секция routes    располагается ДО секции accumulators.
4) Описание должно содержать минимально одну точку контроля, т.е.
   хотя бы одну сущность в секции points. Остальных секция может не быть.

В описании почти всех сущностей присутствуют параметры <имя> и
<титульное название>. Они означают:
  имя   - слово из латинских букв, которое однозначно идентифицирует сущность
          для ссылок на неё (дальше в описании, в град. файле и т.д.);
  титульное название - имя, которое используется при выводе debug-сообщений,
          может иметь русские буквы, ядро после считывания все символы '_'
          заменяет на пробелы;


_______________________________________________________________________________
2. ТОЧКИ КОНТРОЛЯ.

Точка контроля - место установки золомера.
Описываются в секции point.
Описание каждой сущности имеет вид:

  item <класс> <имя> <титульное название> <сигнал конвейера>
       <сигнал от датчика нагрузки> <сигнал от датчика зольности>
       <парамтеры спецефичные для класса>

  класс - число, которое идентифицирует тип точки контроля;
  сигнал конвейера - дискретный сигнал, описанный в кофигурации ввода/вывода
       (файл io.cqm)
  сигнал от датчика нагрузки и сигнал от датчика зольности - частотные сигналы,
       описанные в конфигурации ввода/вывода.

  Доступные классы для точек контроля:

    #  НАЗВАНИЕ           КЛАСС               ГДЕ              СПЕЦИФИЧНЫЕ ПАРАМЕТРЫ
    1  CQM_POINT          CqmControlPoint     с20@stash        стандартная, простая, самая первая.
    3  CQM_POINT_003      CqmControlPoint003  conv1@samara     1 сигнал питателя конвейера
   10  CQM_POINT_GENERAL  CqmControlPointG    м.б. везде       Универсальная точка контроля,
                                                               Любое количество питателей, задержка от них
                                                               в минутах, опредление своего типа угля,
                                                               его задержка в минутах.
                                                               Подробно - в п.2.1

Идентификаторы этих классов описанны в заголовочном файле
common/classes/ctrlpntclass.h.


_______________________________________________________________________________
2.1 УНИВЕРСАЛЬНАЯ ТОЧКА КОНТРОЛЯ.

Описание:
  item <класс=10> <имя> <титульное название> <сигнал конвейера>
       <сигнал от датчика нагрузки> <сигнал от датчика зольности>
       <тип угля> <задержка типа угля> 
       <входящий (питающий) траффик> <задержка питающего трафика>

  тип угля                    - одно из {число|SELF|имя сущности}
                                  число - задаёт значение типа угля
                                  SELF  - точка контроля определяет свой тип угля
                                          в функции MakeCoaltype (например, вагоноопрокид)
                                  Имя сущности - Сущность у которой запрашивается значение
                                          типа.
  задержка типа угля          - количество минут, через которое решённый тип угля 
                                будет участвовать в рассчётах.
  входящий (питающий) траффик - Траффик, который определяет, работают ли питатели 
                                для точки контроля (для точного определения того,
                                что конвейер пустой).
  задержка питающего трафика  - Задержка в минутах значения входящего траффика
                                перед участием в рассчётах.


_______________________________________________________________________________
3. СИСТЕМА ПОВАГОННОГО КОНТРОЛЯ.

Система повагонного контроля распределяет сырьё, параметры которого были
измерены в точке контроля, по вагонам, которые загружают или разгружают, и
этот процесс есть в охваченной технологической схеме.
Описываются в секции vagons.
Описание каждой сущности СПК сильно зависит от её класса, который, как и для
точек контроля, ставится сразу после слова item.

Для контроля загрузки вагонов с одним питателем:
  item 0 <имя> <титульное название> <родительская точка контроля> <сигнал КВ>

Для контроля загрузки вагонов с двумя шиберами:
  item 1 <имя> <титульное название> <родительская точка контроля> <сигнал КВ>
       <сигнал шибер 1> <сигнал шибер 2>

Для контроля разгрузки вагонов на вагоноопрокиде:
  item 2 <имя> <титульное название> <родительский маршрут (route)>
      <тип угля> <сигнал от вагоноопрокида>

_______________________________________________________________________________
4. ФУНКЦИИ (HURU-СКРИПТЫ).

Функции позволяют описать выражения с использованием переменных, знаков
математических и логических операций, которые могут решаться во время
выполнения, например, для определения доли траффика (см. ниже), или описать
правило сложения двух траффиков для получения маршрута и т.д.
Функции описываются в секции functions так.

  item <имя> "<huru-скрипт>"

Синтаксис таких скриптов описан в doc\huru\definition.txt.

_______________________________________________________________________________
5. ТРАФФИКИ.

Траффик - недилимый поток сырья, который движется по технологическим
транспортным линиям. Чаще всего такая линия это:

  <питатель или шибер в одном положении> ->
  <конвейер> ->
  <питатель или шибер в одном положении>

По транспортной линии может двигаться несколько траффиков.
Выходным рассчетным значением траффика является доля сырья прошедшего через
родительскую точку контроля с учётом работы технологического оборудования
(конвейеров, шиберов, питателей).

         n
        ---
        \
        /   foo(S1  ... Sm )
        ---       i       i
        i=0
  dn = ----------------------
             n
            ---
            \
            /    c
            ---   i
            i=0

где
  dn       - доля траффика из сырья родительской точки контроля;
  n        - количество интервалов измерения сигналов (двухсекундных интервалов
             в минуте);
  foo      - решающая функция, описанная в секции function, которая (в идеале)
             выдаёт значение [0..1]. Т.е. показывает двигалось ли сырьё в данный
             интервал по данному траффику: 0 - не двигалось; 1 - всё, что
             двигалось, принадлежит только этому траффику. (0..1) - доля;
  S1 ..Sm  - значение сигналов S1..Sm в i-тый интервал времени;
    i    i

  c        - сигнал от конвейера родительской точки контроля в i-тый
   i         интервал времени;

Траффики описываются в секции traffics:

  item <имя> <титул> <род.точка> <тип угля>
  <решающая_функция> (<аргумент_в_функции>=<имя_сигнала> ...)

  род.точка - родительская точка контроля;
  тип угля  - тип угля для этого траффика (см 2.1)
  решающая функция - функция описанная в секции functions;
  аргумент в функции - название аргумента, которое было использованно при
       описании функции;
  имя сигнала - сигнал, значение которого подставится в значение аргумента
       функции.

Таких пар <аргумент в функции>=<имя_сигнала> может быть несколько, отделяются
они друг от друга пробелами.

_______________________________________________________________________________
6. МАРШРУТЫ.

Маршрут - это поток угля, который состоит из суммы траффиков и
движется по технологическим линиям
и является информативным. Данные по маршрутам, в отличии от траффиков, -
клиентские, т.е. видны из клиента, по ним строятся некоторые отчёты.
Пример маршрута:
  На_котлы - поток угля состоящий из двух траффиков: конвейер1_на_котлы и
  конвейер2_на_котлы.

Маршруты описываются в секции routes:

  item <имя> <титул> <тип угля> 
  <траффик> <функция> (<список аргументов>) + 
  [ <траффик> <функция> (<список аргументов>) ] + ...

  <список аргументов> : <аргумент_в_функции>=<имя_траффика> ...

  тип угля - см. 2.1
  траффик - имя составляющего траффика.
  функция - функция, описанная в functions.
  аргумент_в_функции - имя аргемнта, которое было использовано
                       в описании функции.
  имя_траффика - имя траффика, значение dn которого будет подставленно
                 в значение аргумента функции.

Пример описания маршрута:

item to_furnace   На_котлы  SELF  1axf fuone () + 1bxf fuone ()

Маршрут На_котлы состоит из двух траффиков (1axf и 1bxf),
функция fuone всегда возвращает 1, то есть уголь траффиков
просто складывается без всяких условий.

Значение, которое функция возвращает, умножается на вес угля траффика.
Все полученные таким образом значения угля для пар траффик-функция
складываются и получается значение угля (вес и зольность) для маршрута.

_______________________________________________________________________________
7. АККУМУЛЯТОРЫ.

Аккумуляторы - это любые накопители угля (бункеры, промежуточные ёмкости, склады),
для которых нужно определять вес и зольность. Такое определение осуществимо,
если известно что приходит и уходит из аккумулятора, т.е. можна контролировать
входящий и выходящий маршруты.

Аккумуляторы описываются в секции accumulators.

  item <имя> <титул> <имя входящего маршрута> <имя выходящего маршрут> <ёмкость>

  ёмкость - размер в тоннах, вес угля в аккумуляторе не может быть 
            больше этого значения; если 0 - вес не контролируется.

Пример:
  item storage   Склад     to_storage         from_storage       0


_______________________________________________________________________________
8. ПОСЛЕДОВАТЕЛЬНОСТЬ РЕШЕНИЯ ТИПА УГЛЯ.

В секции makecoaltypeorder описывается последовательность 
вызова функции MakeCoaltype для каждой сущности:

makecoaltypeorder
<имя сущности> ...
end

Например:

makecoaltypeorder
vt1 vt2 1a 1b to_storage to_furnace storage
end

Если сущности в списке нет, для неё вызова MakeCoaltype 
не произойдёт.


_______________________________________________________________________________
9. КОМАНДЫ ПЕРЕД СТАРТОМ ЯДРА НА CQML.

В этой секции определяются команды на языке CQML, которые выполнит ядро
перед началом работы.

Формат:

autoexecs
<команда>
<команда>
...
end

Пример:

autoexecs
set debug 3
set minteov 180
end


_______________________________________________________________________________
10. Переменные ядра.

Ядро хранит некоторые переменные, доступ к которым осуществляются через
команды set и get.

Предопределённые переменные, которые использует ядро и их нужно
задать до запуска в секции autoexecs:

debug   - уровень отладки ядра;
            0x01 - отладка работы алгоритма рассчёта веса и зольности;
            0x02 - отладка работы сущностей: траффики, маршруты и т.д.
            0x04 - отладка ввода-вывода.
minteov - минимальное время между регистрируемыми нажатиями КВ.



_______________________________________________________________________________
© 2002-2004          Комета
  сайт:          www.kometalab.com.ua
  эл. почта: mailbox@kometalab.com.ua
