_______________________________________________________________________________
ЯДРО ПРОГРАММНЫХ СРЕДСТВ КОМПЛЕКСА МОНИТОРИНГА КАЧЕСТВА УГЛЕЙ

_______________________________________________________________________________
КРАТКОЕ РУКОВОДСТВО ПО ИСПОЛЬЗОВАНИЮ.

Copyright © Глузман Владимир, Кеба Руслан, Невойса Эрик,
            Пиленков Олег, Цехмистро Станислав, 2002
______________________________________________________________________________

1. ОПРЕДЕЛЕНИЯ

Комплекс Мониторинга Качества Угля (МКУ) - программно-аппаратный комплекс,
предназначенный для непрерывного автоматического контроля зольности и
количества угля в потоке (на конвейере).

Ядро программных средств Комплекса Мониторинга Качества Углей - программный
платформонезависимый модуль, который реализует базовые функции программных
средств комплекса МКУ.

______________________________________________________________________________

2. НАЗНАЧЕНИЕ

Ядро программных средств Комплекса Мониторинга Качества Углей предназначено
для построения программной системы, которая, взаимодействуя с аппаратными
средствами, обеспечивает:
1) периодический расчёт значений зольности и количества угля;
2) контроль технологических процессов (направления движения горной массы,
   состояние промежуточных ёмкостей, загрузка и разгрузка железнодорожных
   вагонов горной массой);
3) диагностику аппаратных средств.
Если в систему входит интерфейс пользователя и базы данных, то предоставляется
возможность обеспечить:
1) вывод для пользователя (оператора) информации о текущих значениях зольности
   и состоянии технологического оборудования;
2) долгосрочное хранение рассчитанных данных с возможностью их просмотра;
3) создание печатных отчётов.

______________________________________________________________________________

3. СТРУКТУРА

Ядро программных средств Комплекса Мониторинга Качества Углей представляет
собой программный модуль на языке ANSI C++. Модуль включает в себя
набор классов, взаимосвязанных между собой путём наследования или
инкапсуляции. Классы можно разделить на такие категории:
1) управляющие классы;
2) классы устройств и сигналов.
3) классы сущностей (точки контроля, бункеры, вагоны);

Управляющие классы обеспечивают:
1) стартовую инициализацию ядра;
2) инициирование процессов взаимодействия с аппаратными средствами;
3) инициирование процесса расчёта требуемых значений;
4) взаимодействие между дочерними объектами;
5) интерфейс к самому ядру для внешних модулей.
Это - классы: CqmCore (описан в файле cqmcore.h), Compute (cqmcompute.h),
HardwareIO (cqmio.h).

Классы устройств и сигналов описывают интерфейсы для взаимодействия
с аппаратными средствами: инициализация устройств, ввод дискретных и частотных
сигналов. В ядро встроена поддержка устройств ввода/выода.
Классы-родители для построения классов-драйверов конкретных устройств: Signal,
DiscreteSignal, FreqSignal (signals.h), Device (device.h).

Классы сущностей описывают точки контроля, системы повагонного контроля,
траффики, маршруты, аккумуляторы (накопительные ёмкости, бункеры, склады).
Объекты этих классов на основании значений дискретных и частотных сигналов
определяют текущее состояние контроллируемого технологического процесса.
Все классы имеют общего предка - CqmEntity.
Классы: CqmEntity, CqmFuncs, CqmPoint и его потомки, CqmVagon и его потомки,
CqmAlgorithm, CqmTraffic, CqmRoute, CqmAccum и другие.

______________________________________________________________________________

4. ВНЕШНИЕ ИНТЕРФЕЙСЫ

Для построения программной системы на базе ядра необходимы такие внешние
интерфесы:
1) управляющий модуль (обязателен);
2) интерфейс пользователя (необязателен);
3) интерфейс с базой данных (необязателен);

Управляющий модуль, платформозависимый, должен обеспечивать:
1) системнозависимую реализацию функций, объявленных для ядра как внешние
   (extern) в файле cqmsys.h;
2) объявление и инициализацию объекта core;
3) генерирование временных интервалов и инициирование соответствующих
   действий ядра;
4) доступ к текущим значениям рассчитанных данных.
Доступ к ядру управляющий модуль получает через доступные члены и функции
объекта core.

Интерфейс пользователя - это системнозависимый модуль, который обеспечивает,
графический интерфейс пользователя, например: вывод на экран монитора текущих
значений зольности, графики изменения зольности за интересующий период,
зольность загруженных вагонов и т.д.
Для реализации такого интерфейса в ОС Windows могут быть использованы,
например, библиотеки VCL, CLX; в ОС Linux - GTK или wxWidgets.

Интерфейс с базой данных - это системнозависимый модуль, который обеспечивает
взаимодействие с базой данных (любого вида), для долгосрочного
хранения и обработки данных, рассчитанных ядром. Например:
минутные значения зольности и нагрузки, значения зольности вагонов и т.д.
В качестве сервера базы данных может быть выбран Interbase/Firebird, MySql или
PostgreSQL. Наличие такого интерфеса позволяет делать печатные отчёты
за интересующий период.

______________________________________________________________________________
